

使用连接池技术


HikariConfig implements HikariConfigMXBean


JMX
ThreadPoolExecutor
AQS



InnoDB表存储引擎支持事务，行锁，外键，主要面向OLTP，支持非锁定读，即默认情况下读不加锁
InnoDB通过多版本并发控制MVCC来获得高并发性，并且实现了SQL标准的四种事务隔离级别，默认repeatable-read，可以解决脏读，不可重复读两种问题，
同时使用next-key locking行锁算法来避免幻读，所以尽管处于第三级别，但是InnoDB已经解决了所有问题。
对于表中的数据的存储，InnoDB采取聚集的方式clustered，如果没有指定主键，它会为每一行设置一个6 bytes的rowid来作为主键

Memory存储引擎将表中的数据放入内存中，一旦数据库重启，数据将消失，一般用于存储临时数据的临时表，默认使用哈希索引

数据库使用Memory存储引擎作为临时表来存放查询的中间结果集

为什么mysql不支持全文索引？错，myisam存储引擎支持

连接mysql本质是进程间的通信

在通过tcp/ip连接到mysql实例时，mysql首先会检查当前连接的权限，mysql.user表
后台线程的主要作用就是负责刷新内存池中的数据，保证内存池中的数据就是最新的数据，还负责将已修改的数据刷新到磁盘中，同时保证数据库发生异常时可以将DB恢复到正常状态

InnoDB是在一个master thread的线程上实现了所有的功能

内存占比：缓冲池，重做日志缓冲池，额外内存池
缓冲池是占内存最大部分，用来存放各种数据的缓存，因为InnoDB总是以页（每页16KB）的方式读取和刷新数据，然后在使用最近最少使用LRU页面置换算法来保留缓冲池中的数据，
如果数据库文件需要修改，首先会修改缓存，这时页成为脏页，然后再以一定频率将脏页刷新到磁盘中

重做日志缓冲设置大小，我们只需要保证每秒产生的事务量在这个缓冲池大小之内即可

物理内存的连续分配会产生空间碎片的问题，结果分页（逻辑连续，物理分散）

MMU：内存管理单元，是虚拟地址和物理地址的转换单元，CPU使用虚拟地址寻址，MMU转化为物理地址，页表存储映射关系
内存分页4K，内存管理机制，可以允许操作系统能够支持非连续内存的分配
系统为每个进程建立了一张页表，记录页面在内存中对应的物理块号，页表一般存在内存中

InnoDB关键特性：插入缓冲，两次写，自适应哈希索引
插入缓冲针对的是非聚集索引






2019年10月11日10:44:05
delete from XXX;和事务有关，会记录日志，删除慢，可以加where条件过滤
truncate table XXX;DDL语言，不能回滚，删除速度快，不可以加where条件过滤
















