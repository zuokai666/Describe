ServiceInstance：服务实例
其中一个子类：EurekaRegistration，使用了建造者模式，字段多，使用建造者模式，使用一个内部类Builder来构造
和StringBuilder建造者模式

ServiceInstanceChooser：服务实例选择器，它管理服务实例


eureka (因找到某物，尤指问题的答案而高兴) 我发现了，我找到了;

Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的
Ribbon是一个基于HTTP和TCP的客户端负载均衡工具,它基于Netflix Ribbon实现



Eureka：服务注册与发现
Ribbon：负载均衡


com.netflix.loadbalancer.ILoadBalancer负载均衡器管理了众多的服务器com.netflix.loadbalancer.Server


IPing:定义我们如何ping一个服务器来检查它的存活
PingConstant:返回一个常量值（alive or dead）
PingUrl:通过apache.httpget来和服务器通讯，返回成功或失败

IPingStrategy:ping服务器列表的接口
我们可以使用串行，并行两种方式来判断服务器存活

IRule:负载均衡策略




限流算法：漏桶算法，令牌桶算法

Token bucket：限制数据的平均传输速率，还能允许一定程度的突发传输
Leaky bucket：限制数据的平均传输速率，但不允许突发传输

在令牌桶中存在一个桶，用来存放固定数量的令牌，算法中存在一定机制，以一定的速率往桶中放令牌。每一次请求调用需要先获取令牌，只有拿到令牌才有机会继续执行，
否则等待获取可用令牌，或者直接拒绝


























新项目一律采用spring.factories架构加载对应配置类，为了加载旧jar包中的类，使用Import注解，加在Enable***注解上，用来加在配置类



EnableScheduling:使用计划任务，引入计划配置类，加载ScheduledAnnotationBeanPostProcessor类，用来处理BeanFactory中的Bean


SpringApplication.run()启动
1.秒表启动，开始计时
2.获取事先配置好的Spring运行监听器，启动它们
ApplicationEventMulticaster：应用事件多播器，用于管理应用监听器，给对应的监听器广播事件（单线程与多线程）
3.创建环境
4.打印横幅
5.创建应用上下文




