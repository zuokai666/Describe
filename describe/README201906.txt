时间：2019-6-14 09:01:54
位置：spring source code
描述：

BeanPostProcessor Bean后置处理器，用于满足开闭原则，提高扩展性，在不修改源代码的前提下就可以对注册的Bean进行DIY
BeanFactory中以数组存放，以CopyOnWriteArrayList保证线程安全
设计模式：责任链设计模式
时间复杂度：n个Bean，m个后置处理器，线性增长nm，启动时间会变慢


BeanFactoryPostProcessor BeanFactory后置处理器
ApplicationContext中以数组存放，没有考虑线程安全问题：ArrayList


Aware 上层感知接口，加大了两层的依赖，使得下层依赖上层
JDBC 启动类加载器->应用类加载器


面向接口编程，当流程理完后，接口方法也已经定义好了




#
#
-------------------------------------------内容分割线----------------------------------------------
#
#

时间：2019-6-12 21:23:47
位置：lintcode.com
描述：
异或^		不同为1，相同为0
不进位的加法

#
#
-------------------------------------------内容分割线----------------------------------------------
#
#

时间：2019-6-5 10:24:58
位置：lintcode.com
描述：
1.宽度优先搜索 BFS
之所以称之为宽度优先算法，是因为算法自始至终一直通过已找到和未找到顶点之间的边界向外扩展，就是说，算法首先搜索和s距离为k的所有顶点，然后再去搜索和S距离为k+l的其他顶点
但是放到这道题，应该说，算法先搜索与s相邻都是1的点
2.曾经的META-INF/spring.handlers使用PropertiesLoaderUtils来加载

避免工厂模式写if-else，应该考虑新增产品怎么处理

改动外部文件，只要不是源代码就行，因为涉及到编译，所以xml脱颖而出，而后boot流行，使用spring.factories文件配置，增加了扩展性满足开闭原则


#
#
-------------------------------------------内容分割线----------------------------------------------
#
#

时间：2019-6-3 13:38:09
位置：Spring.Cloud [SpringCloud master]
描述：
1.Spring Cloud Netflix
提供的模式包括

服务发现（Eureka）
断路器（Hystrix）
智能路由（Zuul）
客户端负载平衡（Ribbon）



#
#
-------------------------------------------内容分割线----------------------------------------------
#
#

时间：2019-6-2 07:56:09
位置：Spring.Boot [SourceCode master]
描述：
1.boot框架通过使用观察者模式来扩展系统，将观察者以属性文件形式注入系统
2.如果自己设计系统，加载属性配置文件，会怎么设计呢？
设计要素：文件路径+文件名+文件后缀



#
#
-------------------------------------------内容分割线----------------------------------------------
#
#

时间：2019-6-1 09:08:43
位置：Spring.Core [SourceCode master]
描述：今日学习框架中表示顺序概念的模块order
1.spring默认情况下遵循由低到高的顺序，即最低值有最高优先级
	有了优先级顺序，就要有维护顺序的程序，要不然也没啥用，涉及到加载，运行，都会涉及到顺序，
	例如：Servlet {load-on-startup}
2.顺序概念
	2.1 interface Ordered
	2.2 @interface Order 同	javax.annotation.Priority
	2.3 class OrderUtils 用于得到顺序值
	2.4 OrderComparator 这个比较器只会比较实现PriorityOrdered/Ordered接口的对象
	2.5 AnnotationAwareOrderComparator 使用OrderUtils，完成了接口，注解的比较




#
#
-------------------------------------------内容分割线----------------------------------------------
#
#
