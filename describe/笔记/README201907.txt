






java version "1.8.0_111"

静态空间管理转动态空间管理，解决的是数组上溢问题，也不能浪费空间，装填因子loadfactor不能太低

ArrayList:1.5倍策略
int newCapacity = oldCapacity + (oldCapacity >> 1);

Vector:如果设置了固定增长，就是增加固定，否则2倍扩容
int newCapacity = oldCapacity + ((capacityIncrement > 0) ? capacityIncrement : oldCapacity);

                                         
HashMap:2倍扩容
newCap = oldCap << 1
TODO:
threshold=loadfactor*capacity

PriorityQueue:如果原容量小于64，则2倍扩容+2，否则2.5倍扩容
int newCapacity = oldCapacity + ((oldCapacity < 64) ?(oldCapacity + 2) : (oldCapacity >> 1));                                         
                                         
                                
Redis:SDS
当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。(字符串最大长度为 512M)











AQS专题：

AQS，抽象队列同步器，是jdk中一个抽象类，主要定义了节点类，队列的head与tail，state（同步状态）
其中的CAS操作都是调用的Unsafe类的方法
acquire(int arg):将会把int值传给state，可重入性，state++
实现子类Sync
存在于各个场景中：
1.CountDownLatch
2.ReentrantLock
3.ReentrantReadWriteLock：读写分离，共享锁与独占锁
4.Semaphore
5.LimitLatch
6.ThreadPoolExecutor中的Worker任务继承自AQS


CAP定理：一致性，可用性，分区容错性（区间通信可能失败），3个特性不可能同时做到
P一定存在，要么满足C，要么满足A。

一般来说，网页的更新不是特别强调一致性。短时期内，一些用户拿到老版本，另一些用户拿到新版本，问题不会特别大。当然，所有人最终都会看到新版本。所以，这个场合就是可用性高于一致性。

Two-phase Commit：二阶段提交，为了保持分布式系统下所有节点保持事务一致性而设计的一种算法。
协调者：参与者 = 1：n
将之前的一次提交请求分为2个阶段，第一个投票阶段，第二实际提交阶段


CountDownLatch：例子
对于倒计数器，一种典型的场景就是火箭发射。在火箭发射前，为了保证万无一失，往往还要进行各项设备、仪器的检测。
只有等到所有的检查完毕后，引擎才能点火。那么在检测环节当然是多个检测项可以同时进行的。

我司API接口要求响应时间在200ms以内，但是如果一个接口内部依赖多个三方/外部服务，那串行调用接口的RT必然很久，
所以个人用的最多的是接口RT优化场景，内部服务并行调用。

结果：可以提高效率，提高响应速度，但是如果有结果依赖关系就不适用了

适用场景：1.相互无依赖；2.时间限制严格




Semaphore：信号量
在JDK1.5被引入，用来控制同时访问某个特定资源的操作数量，或者同时执行某个指定操作的数量。还可以用来实现某种资源池，或者对容器施加边界

例子：
以一个停车场是运作为例。为了简单起见，假设停车场只有三个车位，一开始三个车位都是空的。这时如果同时来了五辆车，看门人允许其中三辆不受阻碍的进入，
然后放下车拦，剩下的车则必须在入口等待，此后来的车也都不得不在入口处等待。这时，有一辆车离开停车场，看门人得知后，打开车拦，放入一辆，
如果又离开两辆，则又可以放入两辆，如此往复。这个停车系统中，每辆车就好比一个线程，看门人就好比一个信号量，看门人限制了可以活动的线程。
假如里面依然是三个车位，但是看门人改变了规则，要求每次只能停两辆车，那么一开始进入两辆车，后面得等到有车离开才能有车进入，
但是得保证最多停两辆车。对于Semaphore类而言，就如同一个看门人，限制了可活动的线程数。


独占锁：state=1
信号量：state=n
共享锁：state='+oo'

这个都是AQS抽象的功劳


Tomcat使用LimitLatch类实现了对请求连接数的控制
















当偿还借据时，保证线程安全，同步
acct_loan 表：
id:1
name:左凯
money:100
lockFlag:0

当偿还借据时，使用独占锁
{
	begin:
	select lockFlag from acct_loan where id = '1' for update;设置锁等待超时时间
	if(lockFlag == 0){
		sys:开始偿还
		...
	}else{
		sys:有操作在应用该借据，稍等
	}
	commit;
}








某些环节快速失败“fail fast原则”
Fail fast原则是当主流程的任何一步出现问题的时候，应该快速合理地结束整个流程，而不是等到出现负面影响才处理
ConfigurablePropertyResolver.validateRequiredProperties验证必输属性，就可以做到fail fast

系统一般都有第三方依赖，比如数据库，三方接口等。系统开发的时候，需要对第三方保持怀疑，避免第三方出现问题时候的连锁反应，导致宕机。

首先针对超时不可以做重路由，因为socket timeout是不能确定这笔交易是否发送到了三方，是否已经成功或者失败
幂等性






转化系统的设计：
首先设计一个ConversionService顶级接口，用于客户的使用

然后设计转换器，具体到一个类型到一个类型，例如StringToBooleanConverter，然后这就会产生一个关于Converter转换器的类继承体系
因为String is final和Boolean is final，所以这个是1:1

有人需要从String->Byte/Integer/Long等等，难道我们也需要写这么多类吗，然后出现了ConverterFactory，转化工厂，1:N，有效的减少了类的数量
还需要注意类是否可以继承
尤其是在最底层实现，Spring经常喜欢写出一个Util类，来做到通用

GenericConverter N:N是转化服务中最复杂的转化器

现在的问题是3种类型的转换器，如何保存呢？这里使用GenericConverter为元素的ConverterRegistry
其它的2个元素使用适配器模式，来加入到转换器注册中心，实现方式，继承GenericConverter，构造方法传入，然后实现方法


ConverterRegistry是转换器的注册中心，提供了对转换器的增删改查管理方法

然后到了具体实现GenericConversionService中，提供了转化器缓存，设计到缓存就要考虑线程安全问题
使用ConcurrentReferenceHashMap来保证，键值对使用软引用，弱引用，所以是线程安全的。


private final Map<ConverterCacheKey, GenericConverter> converterCache = new ConcurrentReferenceHashMap<>(64);
ConverterCacheKey需要重写equals()和hashCode()
equals:先判断地址，在使用instanceof判断类型，在判断里面每一个属性


DefaultConversionService的功能是注册系统提供了一些默认的转化器，并且里面设计了基于volatile关键字的双重检查锁的单例模式
public static void addDefaultConverters(ConverterRegistry converterRegistry) {}
这里触动很大，考虑到了通用性，和最小依赖，注册转化器就应该只是依赖ConverterRegistry，很厉害




http://os.51cto.com/art/201108/285359.htm
https://blog.csdn.net/yangbodong22011/article/details/73369426
负载均衡：2种方式，硬件方式，软件方式
weighted round-robin：加权轮询调度
Nginx Smooth weighted round-robin SWRR负载均衡算法

Tomcat Acceptor线程转发消息到Poller线程使用轮询算法：哈希，取余法，O(1)
	
	public Poller getPoller0() {
        int idx = Math.abs(pollerRotater.incrementAndGet()) % pollers.length;
        return pollers[idx];
    }

Ribbon的负载均衡策略及原理
https://blog.csdn.net/wudiyong22/article/details/80829808

负载均衡有好几种实现策略，常见的有：
	随机 (Random)
	轮询 (RoundRobin)
	一致性哈希 (ConsistentHash)
	哈希 (Hash)
	加权（Weighted）

	
	
	
	
	
	
在地址映射过程中，若在页面中发现所要访问的页面不在内存中，则产生缺页中断。
当发生缺页中断时，如果操作系统内存中没有空闲页面，则操作系统必须在内存选择一个页面将其移出内存，以便为即将调入的页面让出空间。
而用来选择淘汰哪一页的规则叫做页面置换算法。

LRU:Least recent used最近最少使用




2019年7月31日16:52:10

BigDecimal
不建议采用传入double构造，会有精度问题，带来不可预知性，通常建议优先使用String构造方法 
new BigDecimal(Double.toString(val));

   public BigDecimal add(BigDecimal value); //加法
　　public BigDecimal subtract(BigDecimal value); //减法 
　　public BigDecimal multiply(BigDecimal value); //乘法
　　public BigDecimal divide(BigDecimal value); //除法




